#+TITLE: ED'S Emacs Configuration
#+AUTHOR: Ed Paget

* Rationale
* Finding on the Internet

I keep all of my dotfiles, including this emacs config, in my
[[https://github.com/edpaget/dotfiles/][dotfiles repo]] on GitHub.
* Installation
** Requirements
* Lexical Binding

#+name: lexical-binding
#+begin_src emacs-lisp :comments no
  ;; -*- lexical-binding: t -*-
#+end_src

* Package Management

#+NAME: package-management
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)

  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
#+END_SRC

Add diminish to hide minor modes

#+name: appearance
#+begin_src emacs-lisp
  (use-package diminish
    :straight t
    :demand t)
#+end_src

* Paths
Keep any Elisp files not installed from a package repository in the
=vendor/= directory:

#+NAME: init-before
#+BEGIN_SRC emacs-lisp
  (defvar ed/vendor-directory (concat user-emacs-directory "vendor/"))
  (add-to-list 'load-path ed/vendor-directory)
#+END_SRC

Keep temporary files in a separate directory:

#+NAME: init-before
#+BEGIN_SRC emacs-lisp
  (defvar ed/ephemeral-directory "~/.emacs.ephemeral/")
  (unless (file-exists-p ed/ephemeral-directory)
    (mkdir ed/ephemeral-directory))
#+END_SRC

Add user bin to exec-path
#+NAME: init-before
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :init
    (exec-path-from-shell-initialize))
#+END_SRC

* Backup and Autosave Files
Store backup and autosave files in the =/tmp/= direcotry
  
#+NAME: init-before
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
#+END_SRC

#+RESULTS: init-before
: t

Keep Eshell's temporary files out of the way:

#+NAME: init-after
#+BEGIN_SRC emacs-lisp
  (setq eshell-directory-name (expand-file-name "eshell/" ed/ephemeral-directory))
#+END_SRC   
 
* Appearance and Theme
Hide parts of the GUI that we don't need, namely the graphical tool
bar and any scroll bars.

#+NAME: appearance
#+BEGIN_SRC emacs-lisp
  (if (fboundp 'tool-bar-mode) (tool-bar-mode 0))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode 0))
  (if (fboundp 'fringe-mode) (fringe-mode -1))
#+END_SRC

Use Moe Dark as the the theme. 

#+NAME: appearance
#+BEGIN_SRC emacs-lisp
  (use-package moe-theme
    :straight t
    :config (moe-dark))
#+END_SRC

Highlight the current line.

#+NAME: appearance
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC

#+NAME: appearance
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  (setq inhibit-startup-screen t)

  ;; Set message for *scratch* buffer
  (setq initial-scratch-message ";; Hello, Ed.\n")

  ;; Never require full word answers
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Add support for emojis

#+NAME: apperance
#+begin_src emacs-lisp
  (use-package emojify
    :diminish
    :straight t
    :config
    (setq emojify-program-contexts '(comments))
    :hook
    (after-init . global-emojify-mode))
#+end_src

  
* Spaces Not Tabs

#+NAME: Spaces not Tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 2)
#+END_SRC

* Evil and General
#+NAME: key-binding-modes
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :straight t
    :ensure t
    :init
    (setq evil-want-minibuffer t)
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :straight t
    :ensure t
    :config
    (evil-collection-init))

  (use-package which-key
    :diminish
    :straight t
    :config
    (which-key-mode))

  (use-package general
    :straight t
    :config
    (general-override-mode +1))

  (general-create-definer ep/general-leader-def
    :states '(normal visual insert emacs)
    :non-normal-prefix "C-SPC"
    :prefix "SPC")

  (general-create-definer ep/general-local-leader-def
    :states '(normal visual insert emacs)
    :non-normal-prefix "C-SPC m"
    :prefix "SPC m")
#+END_SRC

* Global Keybinds
#+NAME: global-keybinds
#+BEGIN_SRC emacs-lisp
  
#+END_SRC

* Magit

#+NAME: magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    :general
    (ep/general-leader-def
      "g" '(:ignore t :which-key "git")
      "gg" 'magit-status
      "gb" 'magit-blame))
#+END_SRC

* Completion

#+NAME: completion
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :straight t
    :general
    (ep/general-leader-def
      "bb" 'switch-to-buffer
      "ff" 'find-file
      ":" 'execute-extended-command)
    :init
    (vertico-mode))

  (use-package savehist
    :straight t
    :init
    (savehist-mode))
#+END_SRC

Using it with orderless

#+NAME: completion
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :straight t
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

#+name: completion
#+begin_src emacs-lisp
  (use-package marginalia
    :diminish 
    :ensure t
    :config
    (marginalia-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    (setq enable-recursive-minibuffers t)

    (setq completion-cycle-threshold 3)

    (setq tab-always-indent 'complete))
#+end_src

#+name: completion
#+begin_src emacs-lisp
  (use-package corfu
    :straight t
    :diminish
    :init
    (global-corfu-mode))
#+end_src

#+name: completion
#+begin_src emacs-lisp
  (use-package consult
    :straight t
    :general
    (ep/general-leader-def
      :keymaps 'override
      ;; yank pop
      "yp" 'consult-yank-pop

      ;; errors
      "El" 'consult-flymake)
    :config
    (consult-customize
     consult-buffer consult-project-buffer
     consult-recent-file find-file
     :preview-key (kbd "C-a")))
#+end_src

* Project Management

#+name: projects
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :diminish
    :general
    (ep/general-leader-def
      "p" 'projectile-command-map)
    :config
    (projectile-mode +1))
#+end_src

* Language Support
** General prog-mode stuff
We're going to have cool looking delimiters in all the modes.

#+NAME: prog-mode
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

#+NAME: prog-mode
#+begin_src emacs-lisp
  (use-package tree-sitter
    :straight t
    :diminish
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :straight t
    :diminish
    :after tree-sitter)
#+end_src

#+name: prog-mode
#+begin_src emacs-lisp
  (use-package eglot
    :straight t)
#+end_src

** Org-Mode

#+NAME: org-mode
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)

  (ep/general-local-leader-def
    :keymap 'org-mode

    "i" '(:ignore t :which-key "insert")
    "ih" 'org-insert-heading-respect-content
    "iH" 'org-insert-heading
    "il" 'org-web-tools-insert-link-for-url
    "ic" 'org-insert-structure-template

    "b" '(:ignore t :which-key "blocks")
    "be" 'org-edit-src-code)

  (ep/general-local-leader-def
    :keymap 'org-src-mode
    "b" '(:ignore t :which-key "blocks")
    "bs" 'org-edit-src-save
    "bk" 'org-edit-src-abort
    "bx" 'org-edit-src-exit)
#+END_SRC

** Shared Lisp settings

Let's define all the lisp modes we want to use so other modes can hook into them.

#+Name: lisp-settings
#+begin_src emacs-lisp
  (defconst ed/lisp-mode-hook-list
    '(emacs-lisp-mode-hook lisp-mode-hook))

  (defconst ed/lisp-mode-map-list
    '(emacs-lisp-mode-map))
#+end_src

Eval sexps

#+Name: lisp-settings
#+begin_src emacs-lisp
(ep/general-local-leader-def
    :keymaps ed/lisp-mode-map-list
    "xe" 'eval-last-sexp)
#+end_src

** Rust

#+Name: rust
#+begin_src emacs-lisp
  (use-package rustic
    :straight t
    :config (setq rustic-lsp-client 'eglot))
#+end_src
